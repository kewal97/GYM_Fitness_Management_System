USE project;

-- 1. How many trainers are associated with each type of diet plan? And How many members are following each type of diet plan? And (keto, diabetic etc.)?
SELECT W.DIET_PLAN,
  COUNT(DISTINCT T.TRAINER_ID) AS NUM_OF_TRAINERS,
  COUNT(DISTINCT M.MEMBER_ID) AS NUM_OF_MEMBERS
FROM
  TRAINER T
  JOIN TRAINER_WORKOUT W 
  ON T.TRAINER_ID = W.TRAINER_ID
  LEFT JOIN MEMBERS M
  ON W.PLAN_ID = M.PLAN_ID
GROUP BY W.DIET_PLAN
ORDER BY NUM_OF_TRAINERS DESC, NUM_OF_MEMBERS DESC;
 
-- 2. What are the top 3 peakest hours?
SELECT EXTRACT(HOUR FROM CLOCK_TIME) AS HOUR_OF_DAY, COUNT(*) AS NUM_OF_VISITS
FROM (
  SELECT CLOCK_IN AS CLOCK_TIME
  FROM ATTENDANCE
  UNION ALL
  SELECT CLOCK_OUT AS CLOCK_TIME
  FROM ATTENDANCE
) AS ALL_VISITS
GROUP BY EXTRACT(HOUR FROM CLOCK_TIME)
ORDER BY NUM_OF_VISITS DESC
LIMIT 3;

-- 3. What are the 3 most commonly used payment methods from both expenses and payments?
SELECT PAYMENT_METHOD, SUM(NUM_TRANSACTIONS) AS TOTAL_TRANSACTIONS
FROM (
  SELECT PAYMENT_METHOD, COUNT(*) AS NUM_TRANSACTIONS
  FROM EXPENSES
  GROUP BY PAYMENT_METHOD
  UNION ALL
  SELECT PAYMENT_METHOD, COUNT(*) AS NUM_TRANSACTIONS
  FROM PAYMENTS
  GROUP BY PAYMENT_METHOD
) AS ALL_TRANSACTIONS
GROUP BY PAYMENT_METHOD
ORDER BY TOTAL_TRANSACTIONS DESC
LIMIT 3;

-- 4. How much of each equipment type does the gym currently have?
SELECT G.EQUIPMENT_NAME, count(G.EQUIPMENT_NAME) as NUM_OF_EQUIPMENTS
FROM 
ORDERS O
INNER JOIN GYM_EQUIPMENTS G
ON O.GYM_EQUIPMENTS_ID = G.GYM_EQUIPMENTS_ID
WHERE O.STATUS = 'Delivered'
GROUP BY G.EQUIPMENT_NAME
ORDER BY NUM_OF_EQUIPMENTS DESC;

-- 5.How many members is each trainer currently training?
SELECT T.TRAINER_FIRST_NAME, COUNT(M.MEMBER_ID) AS NUM_OF_MEMBERS
FROM TRAINER T
INNER JOIN TRAINER_WORKOUT W
ON T.TRAINER_ID = W.TRAINER_ID
INNER JOIN MEMBERS M
ON W.PLAN_ID = M.PLAN_ID
GROUP BY T.TRAINER_ID
ORDER BY NUM_OF_MEMBERS DESC;

-- 6. How many members are signed up for each type of membership plan?
SELECT P.MEMBERSHIP_ID, P.DESCRIPTION, COUNT(M.MEMBER_ID) AS NUM_OF_MEMBERS
FROM MEMBERS M 
INNER JOIN MEMBERSHIP_PLAN P
ON M.MEMBERSHIP_ID = P.MEMBERSHIP_ID
GROUP BY M.MEMBERSHIP_ID
ORDER BY NUM_OF_MEMBERS DESC;

-- 7. How does the amount of time each member spend in the gym compare to their scheduled hours for a week?
SELECT M.MEMBER_ID, MAX(W.SCHEDULE_HRS) AS SCHEDULE_HRS, SUM(HOUR(TIMEDIFF(A.CLOCK_OUT, A.CLOCK_IN))) AS TIME_SPEND
FROM ATTENDANCE A
INNER JOIN MEMBERS M
ON A.MEMBER_ID = M.MEMBER_ID
INNER JOIN TRAINER_WORKOUT W
ON M.PLAN_ID = W.PLAN_ID
WHERE DATE(A.CLOCK_IN) >= '2023-01-21' AND DATE(A.CLOCK_OUT) <= '2023-01-27'
GROUP BY M.MEMBER_ID
ORDER BY SCHEDULE_HRS DESC, TIME_SPEND DESC;

-- 8. Every rejected transaction and the associated member.
SELECT M.MEMBER_ID , M.MEMBER_FIRST_NAME, M.MEMBER_LAST_NAME, P.PAYMENT_ID, P.PAYMENT_AMOUNT, P.PAYMENT_DATE
FROM MEMBERS M
INNER JOIN PAYMENTS P
ON M.MEMBER_ID = P.MEMBER_ID
WHERE P.TRANSACTION_STATUS = 'fail'
ORDER BY P.PAYMENT_DATE;
  
-- 9. Ratio of members to trainers
SELECT COUNT(DISTINCT M.MEMBER_ID) / COUNT(DISTINCT T.TRAINER_ID) AS MEMBER_TO_TRAINER_RATIO
FROM TRAINER T
JOIN TRAINER_WORKOUT W 
ON T.TRAINER_ID = W.TRAINER_ID
JOIN MEMBERS M
ON W.PLAN_ID = M.PLAN_ID;

-- 10. How are expenses divided between trainers and orders?
SELECT
  SUM(CASE WHEN TRAINER_ID IS NOT NULL THEN PAYMENT_AMOUNT ELSE 0 END) AS TRAINER_EXPENSE,
  SUM(CASE WHEN order_id IS NOT NULL THEN PAYMENT_AMOUNT ELSE 0 END) AS ORDER_EXPENSE
FROM
  EXPENSES;

-- 11. Total profit of the gym.(Total income - total expenses)
SELECT 
(SELECT SUM(PAYMENT_AMOUNT) FROM PAYMENTS)
 - 
 (SELECT SUM(PAYMENT_AMOUNT) FROM EXPENSES) AS PROFIT;
 
 -- Open stored procedure
 CALL get_member_details(12);








